// Code generated by MockGen. DO NOT EDIT.
// Source: interface/controller/pokemon.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	controller "github.com/FernandoGal25/academy-go-q42021/interface/controller"
	gomock "github.com/golang/mock/gomock"
)

// MockPokemonAction is a mock of PokemonAction interface.
type MockPokemonAction struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonActionMockRecorder
}

// MockPokemonActionMockRecorder is the mock recorder for MockPokemonAction.
type MockPokemonActionMockRecorder struct {
	mock *MockPokemonAction
}

// NewMockPokemonAction creates a new mock instance.
func NewMockPokemonAction(ctrl *gomock.Controller) *MockPokemonAction {
	mock := &MockPokemonAction{ctrl: ctrl}
	mock.recorder = &MockPokemonActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPokemonAction) EXPECT() *MockPokemonActionMockRecorder {
	return m.recorder
}

// ActionGetAll mocks base method.
func (m *MockPokemonAction) ActionGetAll(c controller.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGetAll", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionGetAll indicates an expected call of ActionGetAll.
func (mr *MockPokemonActionMockRecorder) ActionGetAll(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGetAll", reflect.TypeOf((*MockPokemonAction)(nil).ActionGetAll), c)
}

// ActionGetByFilters mocks base method.
func (m *MockPokemonAction) ActionGetByFilters(c controller.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGetByFilters", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionGetByFilters indicates an expected call of ActionGetByFilters.
func (mr *MockPokemonActionMockRecorder) ActionGetByFilters(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGetByFilters", reflect.TypeOf((*MockPokemonAction)(nil).ActionGetByFilters), c)
}

// ActionGetByID mocks base method.
func (m *MockPokemonAction) ActionGetByID(c controller.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionGetByID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionGetByID indicates an expected call of ActionGetByID.
func (mr *MockPokemonActionMockRecorder) ActionGetByID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionGetByID", reflect.TypeOf((*MockPokemonAction)(nil).ActionGetByID), c)
}

// ActionPostByID mocks base method.
func (m *MockPokemonAction) ActionPostByID(c controller.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionPostByID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActionPostByID indicates an expected call of ActionPostByID.
func (mr *MockPokemonActionMockRecorder) ActionPostByID(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionPostByID", reflect.TypeOf((*MockPokemonAction)(nil).ActionPostByID), c)
}
